import { Injectable } from '@angular/core';
import { Observable, of } from 'rxjs';
import { delay, map } from 'rxjs/operators';
import { Location } from '../models/location.model';
import { PoiSearchResult, SearchMode } from '../../../../../../../libs/shared/types/src/schemas/search.schema';
import { GeocodingResult } from '../../../../../../../libs/shared/types/src/schemas/geocoding.schema';
import { HttpClient, HttpParams } from '@angular/common/http';
import { environment } from '../../../../environments/environment';

@Injectable({
  providedIn: 'root'
})
export class LocationSearchService {
  private readonly apiUrl = environment.backendApiUrl;

  constructor(private http: HttpClient) { }

  /**
   * Searches for locations by calling the appropriate backend endpoint based on the search mode.
   * @param query The search string entered by the user.
   * @param mode The search mode, either 'address' or 'place'.
   * @returns An Observable of an array of Location objects.
   */
  searchLocations(query: string, mode: SearchMode): Observable<Location[]> {
    if (mode === 'address') {
      return this.searchByAddress(query);
    } else {
      return this.searchByPlace(query);
    }
  }

  /**
   * Calls the forward geocoding endpoint to search for addresses.
   * @param query The address string.
   */
  private searchByAddress(query: string): Observable<Location[]> {
    const params = new HttpParams().set('search', query);
    const endpoint = `${this.apiUrl}/geocoding/forward`;

    return this.http.get<GeocodingResult[]>(endpoint, { params }).pipe(
      map(results => results.map(this.transformGeocodingResultToLocation))
    );
  }

  /**
   * Calls the POI search endpoint to search for places.
   * @param query The place name string.
   */
  private searchByPlace(query: string): Observable<Location[]> {
    const params = new HttpParams().set('search', query);
    const endpoint = `${this.apiUrl}/poi/poi-search`;

    return this.http.get<PoiSearchResult[]>(endpoint, { params }).pipe(
      map(results => results.map(this.transformPoiResultToLocation))
    );
  }

  /**
   * Transforms a backend GeocodingResult into the frontend Location model.
   * @param result A single result from the /geocoding/forward API.
   */
  private transformGeocodingResultToLocation(result: GeocodingResult): Location {
    return {
      // Use the providerId as the unique ID for tracking in the UI.
      id: result.providerId,
      // For a plain address, the name is often the full address itself.
      name: result.fullAddress || 'Unknown Address',
      description: undefined, // No description from geocoding
      latitude: result.latitude,
      longitude: result.longitude,
      fullAddress: result.fullAddress,
      addressLine1: result.streetAddress,
      city: result.city,
      state: result.region, // Map backend 'region' to frontend 'state' - maybe change this later
      country: result.country,
      postalCode: result.postalCode,
      geocodingProvider: result.provider,
      geocodingProviderId: result.providerId,
      geocodedAt: new Date(),
      // Timestamps currently not generated by backend.

      createdAt: new Date(),
      updatedAt: new Date(),
    };
  }

  private transformPoiResultToLocation(result: PoiSearchResult): Location {
    return {
      id: result.providerId,
      name: result.name,
      description: undefined, // No description from POI search
      latitude: result.latitude,
      longitude: result.longitude,
      fullAddress: result.fullAddress,
      addressLine1: result.streetAddress,
      city: result.city,
      state: result.region,
      country: result.country,
      postalCode: result.postalCode,
      geocodingProvider: result.provider,
      geocodingProviderId: result.providerId,
      geocodedAt: new Date(),
      createdAt: new Date(),
      updatedAt: new Date(),
    };
  }

  mockSearchLocations(query: string, mode: SearchMode): Observable<Location[]> {
    console.log(`Mock LocationSearchService: Searching for "${query}"`);
    const results = mode === 'address'
      ? this.getMockAddressResults(query)
      : this.getMockPlaceResults(query);

    return of(results).pipe(delay(500));
  }

  private getMockAddressResults(query: string): Location[] {
    return [
      {
        id: crypto.randomUUID(),
        name: `Mock Result for "${query}" 1 (123 Main St)`,
        fullAddress: '123 Main St, Anytown, CA 90210',
        addressLine1: '123 Main St',
        city: 'Anytown',
        state: 'CA',
        country: 'USA',
        postalCode: '90210',
        latitude: 34.0522,
        longitude: -118.2437,
        geocodingProvider: 'manual',
        geocodingProviderId: 'manual-123',
        geocodedAt: new Date(),
        description: 'A popular local coffee spot.',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        id: crypto.randomUUID(),
        name: `Mock Result for "${query}" 2 (456 Oak Ave)`,
        fullAddress: '456 Oak Ave, Anytown, CA 90210',
        addressLine1: '456 Oak Ave',
        city: 'Anytown',
        state: 'CA',
        country: 'USA',
        postalCode: '90210',
        latitude: 34.0530,
        longitude: -118.2445,
        geocodingProvider: 'manual',
        geocodingProviderId: 'manual-123',
        geocodedAt: new Date(),
        description: 'A beautiful green space.',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        id: crypto.randomUUID(),
          name: `Mock Result for "${query}" 3`,
        latitude: 34.0540,
        longitude: -118.2455,
        // Some fields might be undefined for POIs
        fullAddress: null,
        addressLine1: null,
        city: 'Anytown',
        state: 'CA',
        country: 'USA',
        postalCode: null,
        geocodingProvider: null,
        geocodingProviderId: null,
        geocodedAt: null,
        createdAt: new Date(),
        updatedAt: new Date(),
      }
    ];
  }

  private getMockPlaceResults(query: string): Location[] {
    return [
      {
        id: crypto.randomUUID(),
        name: `Mock Result for "${query}" 1 (e.g., Coffee Shop)`,
        fullAddress: '345 Main St, Anytown, CA 90210',
        addressLine1: '345 Main St',
        city: 'Anytown',
        state: 'CA',
        country: 'USA',
        postalCode: '90210',
        latitude: 34.0522,
        longitude: -118.2437,
        geocodingProvider: 'manual',
        geocodingProviderId: 'manual-123',
        geocodedAt: new Date(),
        description: 'A popular local coffee spot.',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        id: crypto.randomUUID(),
        name: `Mock Result for "${query}" 2 (e.g., Park)`,
        fullAddress: '876 Oak Ave, Anytown, CA 90210',
        addressLine1: '876 Oak Ave',
        city: 'Anytown',
        state: 'CA',
        country: 'USA',
        postalCode: '90210',
        latitude: 34.0530,
        longitude: -118.2445,
        geocodingProvider: 'manual',
        geocodingProviderId: 'manual-123',
        geocodedAt: new Date(),
        description: 'A beautiful green space.',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        id: crypto.randomUUID(),
        name: `Point of Interest for "${query}" 3`,
        latitude: 34.0540,
        longitude: -118.2455,
        // Some fields might be undefined for POIs
        fullAddress: null,
        addressLine1: null,
        city: 'Anytown',
        state: 'CA',
        country: 'USA',
        postalCode: null,
        geocodingProvider: null,
        geocodingProviderId: null,
        geocodedAt: null,
        createdAt: new Date(),
        updatedAt: new Date(),
      }
    ];
  }
}
