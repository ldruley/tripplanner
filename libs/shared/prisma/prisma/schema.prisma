generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @map("user_id")
  email     String   @unique
  password  String   @db.Text
  role      UserRole
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  profile  Profile?
  settings UserSettings?

  @@map("users")
}

model UserSettings {
  id           String       @id @default(cuid()) @map("user_settings_id")
  userId       String       @unique @map("user_id")
  timezone     String       @default("UTC")
  distanceUnit DistanceUnit @default(MILES) @map("distance_unit")
  darkMode     Boolean      @default(false) @map("dark_mode")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model Profile {
  id                  String     @id @default(uuid()) @db.Uuid
  firstName           String?    @map("first_name")
  lastName            String?    @map("last_name")
  displayName         String?    @map("display_name")
  avatarUrl           String?    @map("avatar_url")
  status              UserStatus
  lastSignInAt        DateTime?  @map("last_sign_in_at") @db.Timestamptz(6)
  createdAt           DateTime?  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime?  @default(now()) @map("updated_at") @db.Timestamptz(6)
  onboardingCompleted Boolean?   @default(false) @map("onboarding_completed")

  //relations
  userId String @unique
  user   User   @relation(onDelete: Cascade, fields: [userId], references: [id])

  @@map("profiles")
}

model Location {
  id          String             @id @default(cuid()) @map("location_id")
  name        String             @db.Text
  description String?            @db.Text
  address     String?            @db.Text
  city        String?
  state       String?
  country     String?
  postalCode  String?            @map("postal_code")
  latitude    Float
  longitude   Float
  apiSource   ApiSourceProvider? @map("api_source")
  category    LocationCategory?
  // Prisma doesn't support geography types directly, so
  //geom        Unsupported("geography(Point, 4326)")? @map("geom")
  createdAt   DateTime           @default(now()) @map("created_at")
  updatedAt   DateTime           @updatedAt @map("updated_at")

  // Relations
  stops          Stop[]
  bankedForTrips TripBankedLocation[]

  //@@index([geom], type: Gist, map: "location_geom_idx") // Spatial index
  @@map("locations")
}

model Trip {
  id          String    @id @default(cuid()) @map("trip_id")
  userId      String    @map("user_id")
  name        String    @default("Untitled Trip") @db.Text
  description String?   @db.Text
  startDate   DateTime? @map("start_date")
  endDate     DateTime? @map("end_date")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  stops           Stop[]
  bankedLocations TripBankedLocation[]
  travelSegments  TravelSegment[]

  @@index([userId], name: "idx_trip_user")
  @@map("trips")
}

// TripBankedLocation: Join table to associate Locations with a Trip's "bank"
model TripBankedLocation {
  id         String   @id @default(cuid()) @map("trip_banked_location_id")
  tripId     String   @map("trip_id")
  locationId String   @map("location_id")
  addedAt    DateTime @default(now()) @map("added_at")

  trip     Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@unique([tripId, locationId], name: "idx_trip_banked_location_unique")
  @@index([tripId], name: "idx_trip_banked_location_trip")
  @@index([locationId], name: "idx_trip_banked_location_location")
  @@map("trip_banked_locations")
}

// Stop: Represents an ordered stop in a trip's itinerary, referencing a Location.
model Stop {
  id String @id @default(cuid()) @map("stop_id")

  tripId     String @map("trip_id")
  locationId String @map("location_id")
  order      Int // Defines the sequence within the itinerary; not nullable

  // Stop-specific details
  plannedArrivalTime      DateTime? @map("planned_arrival_time")
  plannedDepartureTime    DateTime? @map("planned_departure_time")
  calculatedArrivalTime   DateTime? @map("calculated_arrival_time")
  calculatedDepartureTime DateTime? @map("calculated_departure_time")
  notes                   String?   @db.Text

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  trip     Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  segmentAsOrigin      TravelSegment? @relation("SegmentOriginStop")
  segmentAsDestination TravelSegment? @relation("SegmentDestinationStop")
  travelSegmentId      String?
  TravelSegment        TravelSegment? @relation(fields: [travelSegmentId], references: [id])

  @@index([tripId, order], name: "idx_stop_trip_order") // For fetching ordered itinerary
  @@index([locationId], name: "idx_stop_location")
  @@map("stops")
}

// TravelSegment: Represents the journey between two ordered (ITINERARY) stops.
model TravelSegment {
  id String @id @default(cuid()) @map("travel_segment_id")

  tripId            String @map("trip_id")
  originStopId      String @unique @map("origin_stop_id")
  destinationStopId String @unique @map("destination_stop_id")

  travelMode TravelMode? @map("travel_mode")
  distance   Float?
  duration   Int?

  apiCalculatedDistance Float?  @map("api_calculated_distance")
  apiCalculatedDuration Int?    @map("api_calculated_duration")
  polyline              String? @db.Text
  notes                 String? @db.Text

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  trip            Trip   @relation(fields: [tripId], references: [id], onDelete: Cascade)
  originStop      Stop   @relation("SegmentOriginStop", fields: [originStopId], references: [id], onDelete: Cascade)
  destinationStop Stop   @relation("SegmentDestinationStop", fields: [destinationStopId], references: [id], onDelete: Cascade)
  Stop            Stop[]

  @@index([tripId], name: "idx_travelsegment_trip")
  @@map("travel_segments")
}

enum TravelMode {
  DRIVING
  WALKING
  BICYCLING
  TRANSIT
  PUBLIC_TRANSPORT
}

enum UserRole {
  user
  admin
  moderator
}

enum UserStatus {
  active
  suspended
  pending
}

enum ApiSourceProvider {
  GOOGLE_PLACES
  FOURSQUARE
  OPENSTREETMAP
  HERE
  MAPBOX
  USER_INPUT
  INTERNAL_SEED
}

enum LocationCategory {
  RESTAURANT
  CAFE
  HOTEL
  ACCOMMODATION
  LANDMARK
  POINT_OF_INTEREST
  TRANSPORT_HUB
  SHOPPING
  NATURE
  MUSEUM
  PARK
  HISTORICAL_SITE
  ENTERTAINMENT
  OTHER
}

enum DistanceUnit {
  MILES
  KILOMETERS
}
